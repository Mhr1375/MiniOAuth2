name: C++ CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build_and_test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        compiler: [gcc, clang, msvc]
        include: # Define specific configurations if needed, e.g. for different VS versions
          - os: windows-latest
            compiler: msvc
            cmake_generator: Visual Studio 17 2022
        exclude:
          - os: windows-latest
            compiler: gcc
          - os: windows-latest
            compiler: clang

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive' # Ensure submodules like vcpkg are checked out

    - name: Set up compiler (Linux)
      if: runner.os == 'Linux'
      run: |
        if [ "${{ matrix.compiler }}" == "gcc" ]; then
          sudo apt-get update
          sudo apt-get install -y gcc g++ ninja-build cmake
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
        elif [ "${{ matrix.compiler }}" == "clang" ]; then
          sudo apt-get update
          sudo apt-get install -y clang ninja-build cmake
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        fi

    - name: Set up MSVC (Windows)
      if: runner.os == 'Windows' && matrix.compiler == 'msvc'
      uses: microsoft/setup-msbuild@v1.3

    - name: Setup vcpkg (Windows)
      if: runner.os == 'Windows' && matrix.compiler == 'msvc'
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '93193f240893409389e090c242102c5f9a99a91a' # Pinned commit for stability
        vcpkgTriplet: 'x64-windows-static' # Or x64-windows if dynamic linking is preferred
        vcpkgArguments: 'openssl'

    - name: Configure CMake
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          cmake -B build -S . -G "${{ matrix.cmake_generator }}" -DMINIOAUTH2_BUILD_EXAMPLES=ON -DMINIOAUTH2_BUILD_TESTS=ON -DMINIOAUTH2_USE_NLOHMANN_JSON=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        else
          cmake -B build -S . -G Ninja -DMINIOAUTH2_BUILD_EXAMPLES=ON -DMINIOAUTH2_BUILD_TESTS=ON -DMINIOAUTH2_USE_NLOHMANN_JSON=ON -DCMAKE_BUILD_TYPE=Debug -D CMAKE_C_COMPILER=${{ env.CC }} -D CMAKE_CXX_COMPILER=${{ env.CXX }}
        fi
      # Removed env block here as CC/CXX are passed directly in the command for Linux
      # and MSVC setup should handle compiler paths for Windows.

    - name: Build
      run: cmake --build build --config Debug

    - name: Run tests
      if: runner.os != 'Windows' # CTest doesn't always work reliably with MSVC output in simple GH Actions
      working-directory: ./build
      run: ctest -C Debug --output-on-failure

    # TODO: Add steps for:
    # - Static analysis (clang-tidy)
    #   run: | 
    #     sudo apt-get install clang-tidy
    #     cmake -B build-tidy -S . -DCMAKE_CXX_CLANG_TIDY="clang-tidy;-checks=*;"
    #     cmake --build build-tidy
    # - Sanitizer builds (ASan, UBSan)
    #   run: | 
    #     cmake -B build-asan -S . -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-fsanitize=address -g"
    #     cmake --build build-asan
    #     # Run tests under ASan
    # - Check for Boost usage (and fail if found)
    #   run: | 
    #     grep -r -E 'boost::|BOOST_' include/ examples/ test/
    #     if [ $? == 0 ]; then exit 1; fi 