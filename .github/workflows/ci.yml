name: C++ CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build_and_test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        compiler: [gcc, clang, msvc]
        include:
          - os: windows-latest
            compiler: msvc
            cmake_generator: Visual Studio 17 2022
        exclude:
          - os: windows-latest
            compiler: gcc
          - os: windows-latest
            compiler: clang
          - os: ubuntu-latest
            compiler: msvc

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout project code
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        path: main_project

    # Linux Compiler Setup
    - name: Set up GCC (Linux)
      if: runner.os == 'Linux' && matrix.compiler == 'gcc'
      working-directory: main_project
      run: |
        echo ">>> LINUX GCC SETUP INITIATED (OS: ${{ runner.os }}, Compiler: ${{ matrix.compiler }}) <<<"
        echo "DEBUG: Setting up Linux compiler: gcc"
        sudo apt-get update --fix-missing
        sudo apt-get install -y gcc g++ ninja-build cmake
        echo "CC_FOR_CMAKE=gcc" >> $GITHUB_ENV
        echo "CXX_FOR_CMAKE=g++" >> $GITHUB_ENV

    - name: Set up Clang (Linux)
      if: runner.os == 'Linux' && matrix.compiler == 'clang'
      working-directory: main_project
      run: |
        echo ">>> LINUX CLANG SETUP INITIATED (OS: ${{ runner.os }}, Compiler: ${{ matrix.compiler }}) <<<"
        echo "DEBUG: Setting up Linux compiler: clang"
        sudo apt-get update --fix-missing
        sudo apt-get install -y clang ninja-build cmake
        echo "CC_FOR_CMAKE=clang" >> $GITHUB_ENV
        echo "CXX_FOR_CMAKE=clang++" >> $GITHUB_ENV

    # Windows MSVC Setup
    - name: Set up MSVC (Windows)
      if: runner.os == 'Windows' && matrix.compiler == 'msvc'
      uses: microsoft/setup-msbuild@v1.3

    - name: DEBUG - After MSVC Setup (Windows)
      if: runner.os == 'Windows' && matrix.compiler == 'msvc'
      run: |
        echo "DEBUG: MSVC setup step completed."

    # Windows vcpkg setup
    - name: Checkout vcpkg (Windows)
      if: runner.os == 'Windows' && matrix.compiler == 'msvc'
      uses: actions/checkout@v4
      with:
        repository: 'microsoft/vcpkg'
        ref: '2023.10.19'
        path: vcpkg

    - name: Bootstrap vcpkg (Windows)
      if: runner.os == 'Windows' && matrix.compiler == 'msvc'
      working-directory: vcpkg
      run: .\bootstrap-vcpkg.bat -disableMetrics
      shell: cmd

    - name: Install dependencies with vcpkg (Windows)
      if: runner.os == 'Windows' && matrix.compiler == 'msvc'
      working-directory: ${{ github.workspace }}/main_project # vcpkg.json is here
      shell: pwsh
      run: |
        echo "DEBUG: Current directory for vcpkg install: $(Get-Location)"
        echo "DEBUG: Attempting to install dependencies using vcpkg.json from $(Get-Location)"
        echo "DEBUG: vcpkg.exe path to be used: ${{ github.workspace }}\vcpkg\vcpkg.exe"
        echo "DEBUG: --vcpkg-root path to be used: ${{ github.workspace }}\vcpkg"
        & "${{ github.workspace }}\vcpkg\vcpkg.exe" install --triplet x64-windows-static --vcpkg-root "${{ github.workspace }}\vcpkg"
        echo "DEBUG: vcpkg install command finished."

    - name: DEBUG - After vcpkg Setup (Windows)
      if: runner.os == 'Windows' && matrix.compiler == 'msvc'
      run: |
        echo "DEBUG: vcpkg setup and install step completed."
        echo "DEBUG: VCPKG_ROOT (expected) is ${{ github.workspace }}\vcpkg"

    # CMake Configuration
    - name: Configure CMake (Windows)
      if: runner.os == 'Windows' && matrix.compiler == 'msvc'
      working-directory: main_project
      shell: cmd 
      run: |
        echo "DEBUG: Starting CMake configuration for Windows (MSVC)."
        cmake -B build -S . -G "${{ matrix.cmake_generator }}" -DMINIOAUTH2_BUILD_EXAMPLES=ON -DMINIOAUTH2_BUILD_TESTS=ON -DMINIOAUTH2_USE_NLOHMANN_JSON=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE="%GITHUB_WORKSPACE%\vcpkg\scripts\buildsystems\vcpkg.cmake"
        echo "DEBUG: CMake configuration for Windows (MSVC) finished."
    
    - name: Configure CMake (Linux)
      if: runner.os == 'Linux' && (matrix.compiler == 'gcc' || matrix.compiler == 'clang')
      working-directory: main_project
      env:
        CC: ${{ env.CC_FOR_CMAKE }}
        CXX: ${{ env.CXX_FOR_CMAKE }}
      run: |
        echo "DEBUG: Starting CMake configuration for Linux (${{ matrix.compiler }})."
        echo "DEBUG: CC is $CC, CXX is $CXX"
        if [ -z "$CC" ] || [ -z "$CXX" ]; then
          echo "::error:: CC or CXX environment variables are not set for Linux CMake configuration ($CC, $CXX)."
          exit 1
        fi
        cmake -B build -S . -G Ninja -DMINIOAUTH2_BUILD_EXAMPLES=ON -DMINIOAUTH2_BUILD_TESTS=ON -DMINIOAUTH2_USE_NLOHMANN_JSON=ON -DCMAKE_BUILD_TYPE=Debug -D CMAKE_C_COMPILER=$CC -D CMAKE_CXX_COMPILER=$CXX
        echo "DEBUG: CMake configuration for Linux (${{ matrix.compiler }}) finished."

    # Build and Test
    - name: Build
      working-directory: main_project
      run: cmake --build build --config Debug

    - name: Run tests
      if: runner.os != 'Windows'
      working-directory: main_project/build
      run: ctest -C Debug --output-on-failure

    # TODO: Add steps for:
    # - Static analysis (clang-tidy)
    #   run: | 
    #     sudo apt-get install clang-tidy
    #     cmake -B build-tidy -S . -DCMAKE_CXX_CLANG_TIDY="clang-tidy;-checks=*;"
    #     cmake --build build-tidy
    # - Sanitizer builds (ASan, UBSan)
    #   run: | 
    #     cmake -B build-asan -S . -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-fsanitize=address -g"
    #     cmake --build build-asan
    #     # Run tests under ASan
    # - Check for Boost usage (and fail if found)
    #   run: | 
    #     grep -r -E 'boost::|BOOST_' include/ examples/ test/
    #     if [ $? == 0 ]; then exit 1; fi 